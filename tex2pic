#!/usr/bin/env python

def tex2pic(
        texequation,
        outfname = None,
        verbose = False,
        density = 300,
        fmt='pdf'):

    import subprocess
    import tempfile
    import os
    import shutil

    head = r"""% latex file create by sandbox.py
    \documentclass{standalone}
    \begin{document}
    $\displaystyle
    """

    foot = r"""
    $
    \end{document}
    """

    # determine the format of the output
    fmt = os.path.splitext(outfname)[1][1:] if outfname else fmt

    # create temporary directory and filenames
    tmpdir = tempfile.mkdtemp()
    tmptex = os.path.join(tmpdir,"texeq.tex")
    tmppdf = os.path.join(tmpdir,"texeq.pdf")
    tmpout = os.path.join(tmpdir,"texeq."+fmt)

    # write the tmp texfile
    with open(tmptex,'w') as f:
        f.write(head)
        f.write(texequation)
        f.write(foot)

    # compile the tex file in tmpdir
    stdout = None if verbose else open(os.devnull,'w')
    popen = subprocess.Popen("pdflatex -interaction=nonstopmode -pdf %s"%tmptex,
                shell=True,cwd=tmpdir,stdout=stdout,stderr=stdout)
    popen.wait()
    if not verbose: stdout.close()

    # exit if not compiled
    if popen.returncode != 0:
        print "Compilation failed. Run again with -v to detect errors in your formula."
        exit()

    # convert in tmpdir
    if fmt in ['png','jpg','bmp']:
        subprocess.check_call("convert -density %d %s %s"%(density,tmppdf,tmpout),shell=True)

    # return the actual output
    if outfname:
        shutil.copy(tmpout,outfname)
    else:
        with open(tmpout,'r') as f:
            print f.read()

    # remove tmp files
    shutil.rmtree(tmpdir)


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('texequation')
    parser.add_argument('-v','--verbose',action='count', help='print compilation output of pdflatex')
    parser.add_argument('-o','--output',help='the output file which will be generated')
    parser.add_argument('-f','--format',default='pdf',help='format of output (if --output not set)')
    parser.add_argument('-d','--density',default=300,type=int,help='density for convert (300 is nice)')
    args = parser.parse_args()

    tex2pic(
            args.texequation,
            outfname=args.output,
            verbose=args.verbose,
            density=args.density,
            fmt=args.format)
